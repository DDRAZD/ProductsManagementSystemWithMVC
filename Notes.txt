working with WebAPI

Creating new project of WebAPI (lets call it WebAPI test)-> select it empty and checking the box for WebAPI 

from its WebConfig file, pick up the <system.webServer> portion that is necessary for WebAPI and use in the the main project (copy it)

<system.webServer>
    <handlers>
      <remove name="ExtensionlessUrlHandler-Integrated-4.0" />
      <remove name="OPTIONSVerbHandler" />
      <remove name="TRACEVerbHandler" />
      <add name="ExtensionlessUrlHandler-Integrated-4.0" path="*." verb="*" type="System.Web.Handlers.TransferRequestHandler" preCondition="integratedMode,runtimeVersionv4.0" />
    </handlers>
  </system.webServer>

paste it in the main project after the system.web section ( in the main project web config)

also, in main project:

install-package Microsoft.AspNet.WebApi

from the testAPI project copy from the Global.asax file the statement:
 GlobalConfiguration.Configure(WebApiConfig.Register);
 into the GLobal.asax in the main project (this is all in the Application_Start() method)
 importat in that file: using System.Web.Http

 IT IS IMPORTANT THAT THE GLOBALCONFIGURATION WILL BE BEFORE TEH ROUTECONFIG so postman will work properly when calling the API later:
 this is the correct order:
  GlobalConfiguration.Configure(WebApiConfig.Register);
            RouteConfig.RegisterRoutes(RouteTable.Routes);


 from webapiTest project, copy the register method (its at teh App_start, in the webapiconfig.cs) and paste it into a new file called WebAPiCofig.cs that will be placed in the App_start
 remove the "App_start" from namespace (i.e. make sure the namespace is just like the main project)

 this was how to enable webapi in our project - now we do not need the webapitest project and it can be closed

 creating web API controler:
 - add folder of ApiContollers in the main project
 - add WebAPI 2 controller - empty in that folder (i added "brands" controller)

 api contollers do not return html (i.e. not views) but string objects (such as xml or json -> hence Ajax)

 after adding the "Get" method in the controller - we can test using postman if it is working
 --------------------------------------------------

 to call the API using Ajax, we put jQuery in the view 

 the WebAPIconfig.cs gave routing already when we write the URL of api/controllel - the Web API is the client calling the webAPI
 -> Ajax is client side interacting without the need to go back to the server's controller (it goes to the API)

 ------------------------------------
 in the web api controller, the "Get" of the method name is critical - that is what it is looking for when getting a "Get" request. 
 this means you have to start the name of the method with "Get" and you can do any other name after that - just like 
 was in ending a controller name
 -----------------------
 in Postman, to send the id (parameter) for method overloading identificatiion use "key" and "value" that are under the request interface

 --------------------

 insterting a Modal (pop up window) from Bootstrap - https://getbootstrap.com/docs/5.2/components/modal/ took base example from there

 --------------------------------

 for post method, name has to start with a  post-> you can also receive complext structures as ASP.Net supports automatic binding and model binding

 ----------------------------

 to use postman to send post requests -> ou cannot use the params as you are moving more complex structures (json or xml)
 use postmans: 
 Body
 x-www-form-urlencoded
 there you list the key value pairs that constitute your class

 ----------------------
 sending post request using jQuery/Ajax

 ----------------------------
 to allow CORS - cross origin request that is normally blocked by any browser, we need to install in the MVC project:

 install-package Microsoft.AspNet.Cors

 and 

 install-package Microsoft.AspNet.WebApi.Cors

 Then, go to WebApiCongig.cs and add:

 config.EnableCors();

 you go to the controller of the API and give permissions over the class (add "using Systen.Web.Http.Cors"):
 [EnableCors(origins:"the url/domain you want to allow to do CORS", headers:"*", methods:"Get")]->
 you can do "*" in methods to accept all or you can write "Delete", "Put" or "Post"

 --------------------
 Also, to make sure you get JSON response from a WebAPI controller - add in the WebAPiConfig.cs:

 config.Formatters.Remove(config.Formatters.XmlFormatter);  this will remove XML formatter just in case. This is important as you need JSON to read properly with jQuqry when you run the AJAX in browser






